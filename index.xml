<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Jager&#39;s Note</title>
    <link>https://jageros.github.io/note/</link>
    <description>Recent content in Introduction on Jager&#39;s Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 22 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jageros.github.io/note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我想把我写给你</title>
      <link>https://jageros.github.io/note/docs/yingzi/camera/</link>
      <pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/yingzi/camera/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;一个叫单反相机，一个叫微单相机，只差两个字，但是结构却天差万别。单反相机从胶片时代就已经盛行，来到数码时代更是风生水起。微单相机实际上从2009年才诞生，是相机全面电子化的产物。
单反相机之所以称之为单反，是因为它内部有一个反光板，并且快门也是机械机构，高端机型还配备了五棱镜取景。正是如此，单反相机的快门速度有局限性，最大为1/8000秒。取景时观看的和肉眼一致。
微单相机完全的电子化，没有反光板、没有机械快门、没有五棱镜，电子取景器和屏幕取景都是所见即所得。正式因为电子结构，因此连拍速度、快门速度突破了单反的局限，同时视频的性能更加卓越。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>IM系统架构学习文献</title>
      <link>https://jageros.github.io/note/docs/imsys/material/</link>
      <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/imsys/material/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;来自IM即使通信网的一些IM系统架构学习的博客&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>股票知识</title>
      <link>https://jageros.github.io/note/docs/life/stock/</link>
      <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/life/stock/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;股票买卖要点记录&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>单反相机入门基础知识</title>
      <link>https://jageros.github.io/note/docs/life/camera/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/life/camera/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;一个叫单反相机，一个叫微单相机，只差两个字，但是结构却天差万别。单反相机从胶片时代就已经盛行，来到数码时代更是风生水起。微单相机实际上从2009年才诞生，是相机全面电子化的产物。
单反相机之所以称之为单反，是因为它内部有一个反光板，并且快门也是机械机构，高端机型还配备了五棱镜取景。正是如此，单反相机的快门速度有局限性，最大为1/8000秒。取景时观看的和肉眼一致。
微单相机完全的电子化，没有反光板、没有机械快门、没有五棱镜，电子取景器和屏幕取景都是所见即所得。正式因为电子结构，因此连拍速度、快门速度突破了单反的局限，同时视频的性能更加卓越。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>viper配置示例</title>
      <link>https://jageros.github.io/note/docs/golang/viper/</link>
      <pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/golang/viper/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;github.com/spf13/viper&amp;quot;是一个支持读取toml，yaml， ini， json，hcl等格式配置文件的golang库，
本文通过使用该库配合&amp;quot;github.com/spf13/pflag&amp;quot;和&amp;quot;github.com/fsnotify/fsnotify&amp;quot;库实现从配置文件和启动参数对服务进行配置，
并实现监听配置文件的实时改动，从而可实现不停服更新配置&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>go第三方库列表</title>
      <link>https://jageros.github.io/note/docs/golang/go-pkg/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/golang/go-pkg/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;go服务端开发中避免不了使用第三方库，因为第三方库可以避免重复造轮子，大大的提高了开发效率，
这篇文章收集了各种有意思的go语言第三方库，方便开发需要时查找&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>MongoDB的一些操作记录</title>
      <link>https://jageros.github.io/note/docs/database/mongodb/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/database/mongodb/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文记录MongoDB使用过程中，因需求需要进行一些不常用的操作，如创建用户，导出数据，数据备份恢复等运维层面的技术知识，
后续有遇到继续往文章后面添加，以备不时之需，可来此进行查阅&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Nginx命令操作记录</title>
      <link>https://jageros.github.io/note/docs/nginx/nginxop/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/nginx/nginxop/</guid>
      <description> 重新load配置 nginx -s reload 热部署   先替换nginx二进制文件，然后发送kill -USR2 进程号，会启动新master 的进程
然后向老进程发送信号让其优雅的关闭work进程 kill -WINCH 进程号 , 老的master进程会保留防止回退
 </description>
    </item>
    
    <item>
      <title>参考博客文献</title>
      <link>https://jageros.github.io/note/docs/material/reference/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/material/reference/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文收集一下博客文献的链接，供学习参考&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>面试准备</title>
      <link>https://jageros.github.io/note/docs/interview/plan/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/interview/plan/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;每次面试都需要做好充分的准备，这篇文章就是作为面试前准备的复习文档，每次面试前后都会不断优化迭代此文档，供以后使用&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>面试灵魂拷问</title>
      <link>https://jageros.github.io/note/docs/interview/faq/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/interview/faq/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文收集一些面试golang服务端开发的问题和答案，以及一些知识点的参考文章等，让即将面试的小伙伴有佛脚可抱。
包括但不限于Linux， golang， 数据库， nginx， etcd， Redis， http， 消息队列，等等。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>channel注意事项</title>
      <link>https://jageros.github.io/note/docs/golang/channel/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/golang/channel/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;channel是go语言编程中必不可少的元素，但对不同状态的channel作read，write和close操作会有不同的结果，
稍有操作不当，将导致系统 panic，所以本文介绍了channel不同状态的操作结果&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Elasticsearch部署</title>
      <link>https://jageros.github.io/note/docs/elasticsearch/elasticsearch-install/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/elasticsearch/elasticsearch-install/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Elasticsearch是一个开源的分布式、RESTful 风格的搜索和数据分析引擎，它的底层是开源库Apache Lucene。
Lucene 可以说是当下最先进、高性能、全功能的搜索引擎库——无论是开源还是私有，但它也仅仅只是一个库。
本文记录Linux上Elasticsearch的安装配置等部署流程&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>golang sync包的使用</title>
      <link>https://jageros.github.io/note/docs/golang/sync/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/golang/sync/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;go sync 包在go语言并发编程中必不可少，本文介绍go sync包中各个接口的使用方法以及示例&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>go服务端开发学习指南</title>
      <link>https://jageros.github.io/note/docs/golang/study-line/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/golang/study-line/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文介绍基于go语言的服务端程序开发学习指南，根据列举的知识点自行学习，所列知识点都是开发基础必备技术栈。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>go程序优雅退出</title>
      <link>https://jageros.github.io/note/docs/golang/grace-exit/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/golang/grace-exit/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;服务端程序是持续不断运行的，在停服时就需要等待各种服务关闭后再退出程序，
本文将介绍go程序优雅退出目前比较推荐的一种实现方式&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>go程序发布监听事件库</title>
      <link>https://jageros.github.io/note/docs/golang/eventhub/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/golang/eventhub/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这是一个开源的用于golang程序内部发布和监听事件的package，
其原理是通过定义一个全局变量存储监听的事件id和对应的handle函数，
当发布事件时，通过事件id查找对应的handle，如果找到则执行该handle函数。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Linux不常用操作记录</title>
      <link>https://jageros.github.io/note/docs/linux/operate-recode/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/linux/operate-recode/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文记录在使用Linux系统过程中，遇到的一些不常用的，需要查询的，难以记忆的操作命令，
方便以后再次使用的时候，可以翻阅查询，节省查找时间，提高开发效率&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Nginx IP 限流</title>
      <link>https://jageros.github.io/note/docs/nginx/nginx-limit/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/nginx/nginx-limit/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;通过对同一IP进行限流，在一定程度上可以防止应用层DDOS攻击。本文介绍 Nginx对同一IP限流的配置&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>nginx反向代理</title>
      <link>https://jageros.github.io/note/docs/nginx/proxy/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/nginx/proxy/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;利用Nginx的反向代理可以实现多个域名指向同个服务器的不同网站，本文将介绍如何配置&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>queue golang实现</title>
      <link>https://jageros.github.io/note/docs/golang/queue/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/golang/queue/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文介绍go语言&lt;code&gt;gopkg.in/eapache/queue&lt;/code&gt;包的原理，代码解析以及使用方法&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>生成x个随机数</title>
      <link>https://jageros.github.io/note/docs/algorithm/random-n-int/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/algorithm/random-n-int/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;需求：生成x个随机数，要求这个x个随机数的和为y， 且随机数的最大值小于平均数的3倍，最小值大于0，例如：5个和为10的随机数避免出现6，1，1，1，1的情况。
【使用场景：游戏中卡牌包开包时随机出现卡牌质量的分布】&lt;br&gt;
本文展示go语言对该算法的实现&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes服务部署步骤</title>
      <link>https://jageros.github.io/note/docs/kubernetes/kubernetes-setup/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/kubernetes/kubernetes-setup/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;kubernetes，简称K8s，是用8代替8个字符“ubernete”而成的缩写。
是一个开源的，用于管理云平台中多个主机上的容器化的应用，
Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）,
Kubernetes提供了应用部署，规划，更新，维护的一种机制。
本文将介绍Kubernetes集群的部署步骤&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jageros.github.io/note/docs/git/git-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jageros.github.io/note/docs/git/git-flow/</guid>
      <description>Git Flow 模型以及工具的使用 #  Git Flow 是什么？ #   2010 年 5 月，在一篇名为 “ A successful Git branching model” 的博文中，Vincent Driessen 介绍了一种构建在 Git 之上的软件开发模型。通过利用 Git 创建和管理分支的能力，为每个分支设定具有特定的含义名称，并将软件生命周期中的各类活动归并到不同的分支上，实现了软件开发过程不同阶段的相互隔离。这种软件开发的活动模型被 Vincent 称为 “Git Flow”
 Git Flow 流程图 #  这是 Vincent 博文中的 Git FLow 流程图：从右向左看，从上到下看。
 Git Flow Branches #   Git Flow 的核心就是 Branch，通过在项目的不同阶段对 Branch 的不同操作（包括但不限于 create、merge、rebase 等）来实现一个完整的高效率的工作流程。Git Flow Branches 主要分为两大类：Main Branchs（主分支） 和 Supporting branches（辅助分支）。 其中 Main Branchs 中又包含了 Master 和 Develop，而 Supporting branches 中包含了 Feature、Release、Hotfix 以及其他自定义分支</description>
    </item>
    
  </channel>
</rss>
